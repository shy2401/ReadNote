* Chapter 3. Syntax and Style
** Variable assignment
   1. y = (x = x + 1) #assignments not expressions, this returns invalid syntax error
   2. do not support ++x, x++, --x, x--
   3. multi assignment:
      - x = y = z = 1
      - x, y, z = 1, 2, 'a string'  ----> recommand (x, y, z) = (1, 2, "a string")
      - (x, y) = (y, x)   # swapping variables

** Special Underscore Identifiers
   1. __xxx do not import with 'from module import *'
   2. __xxx__ system-defined name
   3. __xxx request private name mangling in class

** Module Structure and Layout
   1. __name__ contains module name if imported
   2. __name__ contains '__main__' if executed directly

* Chapter 4. Python Object
** Standard Type Operators and Built-In Functions
   | operator/function     | description              | result      |
   |-----------------------+--------------------------+-------------|
   | string representation |                          |             |
   | ``                    | string representation    | string      |
   | built-in functions    |                          |             |
   | cmp(obj1, obj2)       | compares two objects     | interger    |
   | repr(obj)             | string representation    | string      |
   | str(obj)              | string representation    | string      |
   | type(obj)             | determines object type   | type object |
   | value comparisons     |                          |             |
   | <                     | less than                | Boolean     |
   | >                     | greater than             | Boolean     |
   | <=                    | less than or equal to    | Boolean     |
   | >=                    | greater than or equal to | Boolean     |
   | ==                    | equal to                 | Boolean     |
   | !=                    | not equal to             | Boolean     |
   | <>                    | not equal to             | Boolean     |
   | object comparisons    |                          |             |
   | is                    | the same as              | Boolean     |
   | is not                | not the same as          | Boolean     |
   | Boolean operators     |                          |             |
   | not                   | logical negation         | Boolean     |
   | and                   | logical conjuction       | Boolean     |
   | or                    | logical disjunction      | Boolean     | 
  
** Categorizing the Standard Types
   | Data Type    | Storage Model  | Update Model | Access Modes |
   |--------------+----------------+--------------+--------------|
   | numbers      | literal/scalar | immutable    | direct       |
   | strings      | literal/scalar | immutable    | sequence     |
   | lists        | container      | mutable      | sequence     |
   | tuples       | container      | immutable    | sequence     |
   | dictionaries | container      | mutable      | mapping      |

* Chapter 5. Numbers
** Complex Number Attributes
   | attribute       | desciption                                |
   | num.real        | real component of complex number num      |
   | num.imag        | imaginary component of complex number num |
   | num.conjugate() | returns complex conjugate of num          |

** Most commonly used functions in the random module
   | randint() | takes two inter values and returns a random integer between those values inclusive  |
   | uniform() | does almost the samething as randint(),but returns a float and is inclusive only of |
   |           | the smaller number(exclusive of the lagernumber)                                    |
   | random()  | works just like uniform() except that the smaller number if fixed at 0.0, and the   |
   |           | larger number is fixed at 1.0                                                       |
   | choice()  | given a sequence, randomly selects and returns a sequence item                      |

** Operators and Built-in Functions for All Numeric Types
   | Operator/built-in | Description        | int | long | float   | complex | Result   |
   |-------------------+--------------------+-----+------+---------+---------+----------|
   | abs()             | absolute value     | *   | *    | *       | *       | numbera  |
   | chr()             | character          | *   | *    |         |         | string   |
   | coerce()          | numeric coercion   | *   | *    | *       | *       | tuple    |
   | complex()         | complex conversion | *   | *    | *       | *       | complex  |
   | divmod()          | division/modulo    | *   | *    | *       | *       | tuple    |
   | float()           | float conversion   | *   | *    | *       | *       | float    |
   | hex()             | hexadecimal string | *   | *    |         |         | string   |
   | int()             | int conversion     | *   | *    | *       | *       | int      |
   | long()            | long conversion    | *   | *    | *       | *       | long     |
   | oct()             | octal string       | *   | *    |         |         | string   |
   | ord()             | ordinal            |     |      | (strig) |         | int      |
   | pow()             | exponentiation     | *   | *    | *       | *       | number   |
   | round()           | float rounding     |     |      | *       |         | float    |
   | **                | exponentiation     | *   | *    | *       | *       | number   |
   | +                 | no change          | *   | *    | *       | *       | number   |
   | -                 | negation           | *   | *    | *       | *       | number   |
   | ~                 | bit inversion      | *   | *    |         |         | int/long |
   | **                | exponentiation     | *   | *    | *       | *       | number   |
   | *                 | multiplication     | *   | *    | *       | *       | number   |
   | /                 | division           | *   | *    | *       | *       | number   |
   | %                 | modulo/remainder   | *   | *    | *       | *       | number   |
   | +                 | p\addition         | *   | *    | *       | *       | number   |
   | -                 | subtraction        | *   | *    | *       | *       | number   |
   | <<                | bit left shift     | *   | *    |         |         | int/long |
   | >>                | bit right shift    | *   | *    |         |         | int/long |
   | &                 | bitwise AND        | *   | *    |         |         | int/long |
   | ^                 | bitwise XOR        | *   | *    |         |         | int/long |
   | |                 | bitwise OR         | *   | *    |         |         | int/long |

* Chapter 6. Sequences: Strings, Lists, and Tuples
** Sequences
*** Sequence Type operators(operators supporte all sequence types)
    | Seuqunce Operator | Function                                     |
    |-------------------+----------------------------------------------|
    | seq[ind]          | element located at index ind of seq          |
    | seq[ind1:ind2]    | elements from ind1 to ind2 of seq            |
    | seq * expr        | seq repeated expr times                      |
    | seq1 + seq2       | concatenates sequences seq1 and seq2         |
    | obj in seq        | tests if obj is a member of sequence seq     |
    | obj not in seq    | tests if obj is not a member of sequence seq |

*** Sequence Type Conversion Built-in Function
    | Function   | Operation              |
    |------------+------------------------|
    | list(seq)  | converts seq to list   |
    | str(obj)   | converts obj to string |
    | tuple(seq) | converts seq to tuple  |

*** Sequence Type operational Built-in Functions
    | Function | Operation                              |
    |----------+----------------------------------------|
    | len(seq) | return length (number of items) of seq |
    | max(seq) | return "largest" element in seq        |
    | min(seq) | return "smallest" element in seq       |

** Strings
*** String-only Operators
    1. Formate Operator(%)
       - format_string % (arguments_to_convert)
       - input arguments(arguments_to_convert) can be tuple or dictionary
       - Format Operator Conversion Symbols
         1. %c
         2. %s
         3. %i
         4. %d
         5. %u
         6. %o
         7. %x
         8. %X
         9. %e
         10. %E
         11. %f
         12. %g
         13. %G
    2. Raw String Operator(r/R)
    3. Unicode String Operator(u/U)
*** Built-in Funcions
    1. com()
    2. len()
    3. max()
    4. min()
    5. raw_input()
*** String Built-in Methods
    1. string.capitalize()
    2. string.center(width)
    3. string.count(str, beg = 0, end = len(string))
    4. string.encode(encoding = 'UTF-8', errors = 'strict')
    5. string.endswith(str, beg = 0, end = len(string))
    6. string.expandtabs(tabsize = 8)
    7. string.find(str, beg = 0, end = len(string))
    8. string.index(str, beg = 0, end = len(string))
    9. string.isalnum()
    10. string.isalpha()
    11. string.isdecimal()
    12. string.isdigit()
    13. string.islower()
    14. string.isnumeric()
    15. string.isspace()
    16. string.istitle()
    17. string.isupper()
    18. string.join(seq)
    19. string.ljust(width)
    20. string.lower()
    21. string.lstrip()
    22. string.replace(str1, str2, num = string.count(str1))
    23. string.rfind(str, beg = 0, end = len(string))
    24. string.rindex(str, beg = 0, end = len(string))
    25. string.rjust(width)
    26. string.rstrip()
    27. string.split(str = "", num = string.count(str))
    28. string.splitlines(num = string.count('\n'))
    29. string.startswith(str, beg = 0, end = len(string))
    30. string.strip([obj])
    31. string.swapcase()
    32. string.title()
    33. string.translate(str, del = "")
    34. string.upper()
    35. string.zfill(width)

** Lists
*** List Type Built-in Methods
    1. list.append(obj)
       - appends object obj to list
    2. list.count(obj)
       - returns count of how many times boj occurs in list
    3. list.extend(seq)
       - appends the contents of seq to list
    4. list.index(obj)
       - returns the lowest index in list that obj appears
    5. list.insert(index, obj)
       - inserts object obj into list at offset index
    6. list.pop(index = -1)
       - removes and returns last object or obj at offset index from list
    7. list.remove(obj)
       - removes object obj from list
    8. list.reverse()
       - reverses objects of list in place
    9. list.sort([func])
       - sorts objects of list, use compare func if given

** Tuples
*** empty Tuplues
    1. (,)
       - comma is necessary.

* Chapter9. Files and Input/Output
** File Built-in Methods
   | File Object Method      | Operation                                                  |
   |-------------------------+------------------------------------------------------------|
   | file.close              | close file                                                 |
   |-------------------------+------------------------------------------------------------|
   | file.fileno()           | return integer file descriptor(FD) for file                |
   |-------------------------+------------------------------------------------------------|
   | file.flush()            | flush internal buffer for file                             |
   |-------------------------+------------------------------------------------------------|
   | file.isatty()           | return 1 if file is a tty-like device, 0 otherwise         |
   |-------------------------+------------------------------------------------------------|
   | file.read(size = -1)    | read all or size bytes of file as a string and return it   |
   |-------------------------+------------------------------------------------------------|
   | file.readline()         | read and return one line from file(include trailint "\n")  |
   |-------------------------+------------------------------------------------------------|
   | file.readlines()        | read and return all lines from file as a list(includes     |
   |                         | all trailing "\n" characters)                              |
   |-------------------------+------------------------------------------------------------|
   | file.seek(off, whence)  | move to location within file, off bytes offset from whence |
   |                         | (0==beginning of file, 1 == current location, or 2 == end  |
   |                         | of file)                                                   |
   |-------------------------+------------------------------------------------------------|
   | file.tell()             | teturn current location within file                        |
   |-------------------------+------------------------------------------------------------|
   | file.truncate(size = 0) | truncate file to 0 or size bytes                           |
   |-------------------------+------------------------------------------------------------|
   | file.write(str)         | write string str to file                                   |
   |-------------------------+------------------------------------------------------------|
   | file.writelines(list)   | write list of strings to file                              |

** File Built-in Attributes
   | File Object Attribute | Description                                                    |
   |-----------------------+----------------------------------------------------------------|
   | file.closed           | 1 if file is closed, 0 otherwise                               |
   |-----------------------+----------------------------------------------------------------|
   | file.mode             | access mode with which file was opened                         |
   |-----------------------+----------------------------------------------------------------|
   | file.name             | name of file                                                   |
   |-----------------------+----------------------------------------------------------------|
   | file.softspace        | 0 if space explicitly required with print, 1 otherwise; rarely |
   |                       | used by the programmer--generally for internal use only.       |

** File System
   1. os Module File/Directory Access Functions
      | os Module File/Directory Function | Operation                               |
      |-----------------------------------+-----------------------------------------|
      | File Processing                   |                                         |
      |-----------------------------------+-----------------------------------------|
      | remove()/unlink()                 | delete file                             |
      |-----------------------------------+-----------------------------------------|
      | rename()                          | rename file                             |
      |-----------------------------------+-----------------------------------------|
      | *stat()                           | return file statistics                  |
      |-----------------------------------+-----------------------------------------|
      | symlink()                         | create symbolic link                    |
      |-----------------------------------+-----------------------------------------|
      | utime()                           | update time stamp                       |
      |-----------------------------------+-----------------------------------------|
      | Directories/Folders               |                                         |
      |-----------------------------------+-----------------------------------------|
      | chdir()                           | change working directory                |
      |-----------------------------------+-----------------------------------------|
      | listdir()                         | list files and directories in directory |
      |-----------------------------------+-----------------------------------------|
      | getcwd()                          | return current working directory        |
      |-----------------------------------+-----------------------------------------|
      | mkdir()/makedirs()                | create directory(ies)                   |
      |-----------------------------------+-----------------------------------------|
      | rmdir()/removedirs()              | remove directory(ies)                   |
      |-----------------------------------+-----------------------------------------|
      | pardir                            | variavle, contains the parent directory |
      |                                   | string '..'                             |
      |-----------------------------------+-----------------------------------------|
      | Access/Permissions(available only | on Unix(U) or Windows(W))               |
      |-----------------------------------+-----------------------------------------|
      | access()                          | verify permission modes U               |
      |-----------------------------------+-----------------------------------------|
      | chmod()                           | change permission modes U W             |
      |-----------------------------------+-----------------------------------------|
      | umask()                           | set default permission modes U W        |

   2. os.path Module Pathname Access Functions
      | os.path Pathname Function | Operation                                     |
      |---------------------------+-----------------------------------------------|
      | Separation                |                                               |
      |---------------------------+-----------------------------------------------|
      | basename()                | remove directory path and return leaf name    |
      |---------------------------+-----------------------------------------------|
      | dirname()                 | remove leaf name and return directory path    |
      |---------------------------+-----------------------------------------------|
      | join()                    | join separate components into single pathname |
      |---------------------------+-----------------------------------------------|
      | split()                   | return (dirname(), basename()) tuple          |
      |---------------------------+-----------------------------------------------|
      | splitdrive()              | return (drivename, pathname) tuple            |
      |---------------------------+-----------------------------------------------|
      | splitext()                | return (filename, extension) tuple            |
      |---------------------------+-----------------------------------------------|
      | Information               |                                               |
      |---------------------------+-----------------------------------------------|
      | getatime()                | return last file access time                  |
      |---------------------------+-----------------------------------------------|
      | getmtime()                | return last file modification time            |
      |---------------------------+-----------------------------------------------|
      | getsize()                 | return file size(in bytes)                    |
      |---------------------------+-----------------------------------------------|
      | Inquiry                   |                                               |
      |---------------------------+-----------------------------------------------|
      | exists()                  | does pathname (file or directory) exist?      |
      |---------------------------+-----------------------------------------------|
      | isdir()                   | does pathname exist and is a directory?       |
      |---------------------------+-----------------------------------------------|
      | isfile()                  | does pathname exist and is a file?            |
      |---------------------------+-----------------------------------------------|
      | islink()                  | does pathname exist and is a symbolic link?   |
      |---------------------------+-----------------------------------------------|
      | samefile()                | do both pathnames point to the same file?     |

