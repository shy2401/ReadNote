
* 说明
  1. 命令
     - 解释
     - 例子
       + 对例子的解释

* 第二章Python起步
  1. print
     - 输出
     - print "%s is number %d!" % ("Python", 1)
       + %d %f %s同C语言
  2. _
     - 下划线:在解释器中表示最后一个表达式的值
  3. raw_input()
     - 输入
     - user = raw_input('Enter login name: ')
       + 可用int()将数值字符串转换成整数
  4. 运算符
     - + - * / // % **
       + // : 浮点除法(对结果进行四舍五入)
       + ** : 乘方运算符
       + 优先级: ** > 单目运算符+ - > * / // % > + -
     - < <= > >= == != <>
       + <> 不等于, 与!= 相同
       + 例: 3<4<5 合法,是 3<4 and 4<5的缩写
     - and or not
       + 逻辑运算符
  5. 变量和赋值
     - 变量名
       + 第一个字符是字母或下划线,其余的字符为数字,字母或下划线.
       + 变量名是大小写敏感的,即区分大小写
     - 变量的类型和值在赋值那一刻被初始化,不需要预先声明变量的类型
     - python支持增量赋值.
       + 例: n = n*10 等于 n *= 10
     - python不支持自增1和自减1,这是因为+和-也是单目运算符,python会将--n解释为-(-n)从而
       得到n,同样++n的结果也是n.
  6. 数字
     - Python支持五种基本数字类型
       + int(有符号整数)
       + long(长整数)
         * 例: 232L
         * python中的长整数所能表达的范围远超过C语言的长整数
       + bool(布尔值)
       + float(浮点值)
       + complex(复数)
  7. 字符串
     - python中字符串被定义为引号之间的字符集合.
       + python支持使用成对的单引号或双引号,三引号(三个连续的单引号或者双引号)可以用来包含特殊字符.
       + 使用索引运算符([])和切片运算符([:])可以得到子字符串.
       + 字符串有其特有的索引规则:第一个字符的索引是0,最后一个字符的索引是-1.
       + 加号(+)用于字符串连接运算, 星号(*)用于字符串重复.
  8. 列表和元组
     - 列表元素用中括号([])包裹,元素的个数即元素的值可以改变
     - 元组元素用小括号(())包裹,不可以更改(尽管他们的内容可以)
     - 通过切片运算([]和[:])可以得到字集.
  9. 字典
     - 字典是Python中的映射数据类型,由键-值(key-value)对构成.
     - 几乎所有类型的Python对象都可以用作键,不过一般还是以数字或者字符串最为常用.
  10. 代码块及缩进对齐
  11. if语句
      - 标准if条件语句的语法如下:
        if expression1:
            if_suite
        elif expression2:
            elif_suite
        else:
            else_suite
      - 如果表达式的值非0或者为布尔值True,则执行下面的语句.
  12. while循环
      - 标准while条件循环语句的语法:
        while expression:
            while_suite
      - 语句while_suite会被连续不断的循环执行,直到表达式的值变成0或False
  13. for循环和range()内建函数
      - 类似与shell脚本中的foreach
      - print语句默认会给每一行添加一个换行符,只要在print语句的最后添加一个逗号(,)就可以改变
        这种行为.带逗号的print语句输出的元素之间会自动添加一个空格.
      - range()生成一个数值范围的列表
      - len()求一个字符串,数组,元组的长度
  14. 列表解析
      - 挑选符合的值放入列表
        sqdEvens = [x ** 2 for x in range(8) if not x % 2]
  15. 文件和内建函数open(),file()
      - 打开文件
        + handle = open(file_name, access_mode = 'r')
          * 例子: fobj = open(filename, 'r')
          * access_modes
            1) 'r' 读取 (默认值)
            2) 'w' 写入
            3) 'a' 添加
            4) '+' 读写
            5) 'b' 二进制访问
  16. 错误和异常
      - 使用try-except给代码添加错误检测及异常处理
      - 使用raise语句故意引发一个异常.
  17. 函数
      - 函数使用小括号(())调用,函数在调用之前必须先定义.
      - 函数中如果没有return语句,就会自动返回None对象
      - 函数参数是通过引用调用的.这就意味着函数内对参数的改变会影响道原始对象.不过事实上只有可变
        对象会受此影响,对不可变对象来说,它的行为类似按值调用.
      - 定义函数
        def function_name([arguments]):
            '''optional documentation string'''
            function_suite
      - + 运算符支持数值想加以及序列合并
      - 默认参数
        def function_name(argument = default):
  18. 类
      - 定义类
        class ClassName(base_class[es]):
            '''optional documentation string'''
            static_member_declarations
            method_declarations
      - 使用class关键字定义类.可以提供一个可选的父类或者说基类;如果没有合适的基类,那就使用object
        作为基类.
      - 创建类实例
        foo1 = FooClass()
  19. 模块
      - 模块是一种组织形式,它将彼此有关系的Python代码组织到一个个独立文件当中.
      - 模块可以包含可执行代码,函数和类或者这些东西的组合
      - 当创建乐一个Python源文件,模块名字就使不带.py后缀的文件名.
      - 导入模块
        import module_name
      - 访问一个模块函数或访问一个模块变量
        module.function()
        module.variable


* Python基础
  1. 语句和语法
     - Python语句中有一些基本规则和特殊字符:
       + 井号(#)表示之后的字符为Python注释
       + 换行(\n)是标准的行分隔符(通常一个语句一行)
       + 反斜线(\)继续上一行
         1) 一行过长的语句可以使用反斜线(\)分解成几行
         2) 在使用闭合操作符时,单一语句可以跨多行,例如:在含有小括号,中括号,花括号时可以多行书写.
            另外就使三引号包括下的字符串也可以跨行书写
       + 分号(;)将两个语句连接在一行中
         1) 分号(;)写在同一行的语句不能在这行开始一个新的代码块
       + 冒号(:)将代码会的头和体分开
       + 语句(代码块)用缩进块的方式体现
       + 不同的缩进深度分隔不同的代码块
       + Python文件以模块的形式组织
  2. 变量赋值
     - 赋值运算符,增量赋值
       + =, +=, -=, *=, /=, %=, **=, <<=, >>=, &=, ^=, |=
     - 赋值并不是直接将一个值赋值给一个变量,在Python语言中,对象时通过引用传递的.在赋值时,不管这个对象
       是新创建的,还是一个已经存在的,都是将该对象的引用(并不是值)赋值给变量.
     - Python的赋值语句不会返回值.
     - 增量赋值相对普通赋值最有意义的变化是第一个对象仅被处理一次.可变对象会被就地修改(无需拷贝引用),
       不可变对象则和A=A+B的结果一样(分配一个新对象).
     - 多元赋值
       + 多元赋值时等式两边的对象都是元组
       + 通常元组需要用圆括号(小括号)括起来,可以省去,是可选的.
  3. 标识符
  4. 基本风格指南
     - 模块中没有缩进的代码行在被导入时就会执行.
     - __name__系统变量
       + 如果模块是被导入,__name__的值为模块名字
       + 如果模块是被直接执行,__name__的值为'__name__'
  5. 内存管理
     - 变量定义
       + Python中,无需变量声明语句,变量在第一次被赋值时自动声明.
       + 变量只有被创建和赋值后才能被使用.
     - 动态类型
       + Python中变量不需要事先声明,且也无需类型声明
       + Python中对象的类型和内存占用都是运行时确定的.
       + 在创建(也就是赋值)时,解释器会根据语法和右侧的操作数来决定新对象的类型.在对象创建后,
         一个该对象的引用会被赋值给左侧的变量.
     - 内存分配
       + Python解释器承担了内存管理的复杂任务
     - 引用计数
       + Python中使用一个引用计数来记录对象有多少个引用.
       + 当对象被创建时,就创建一个引用计数,当这个对象不再需要时,这个对象的引用计数变为0,它被
         垃圾回收.
       + 当对象的引用被销毁时,引用计数会减小.
         1) 当引用计数离开起作用范围时,所有句不变量都被自动销毁,对象的的引用计数也就随之减少.
         2) 当变量被赋值给另外一个对象时,原对象的引用计数也会自动减1.
         3) 对象的别名被显式销毁:del
         4) 对象被从一个窗口对象中移除
         5) 窗口对象本身被销毁
       + del语句
         del obj1[, obj2[,...objN]]
         del 只是将变量从名字空间删除
       + 任何追踪和调试程序会给一个对象增加一个额外的引用,这会推迟对象被回收的时间.
     - 垃圾回收
       + 垃圾收集器是一块独立的代码,它用来寻找引用计数为0的对象.它也负责检察哪些虽然引用计数
         大于0但也应该被销毁的对象.
  6. 相关模块和开发工具
     - Debugger:pdb
     - Logger:logging
     - Profilers:profile,hotshot,cProfile

* Python对象
  1. Python对象
     - Python使用对象模型来存储数据
     - 所有的Python对象都拥有三个特性:身份,类型和值
       + 身份:
         每一个对象都有一个唯一的身份标识字集,可以用内建函数id()来得到.
       + 类型
         对象的类型可以用内建函数type()来查看.在python中类型也是对象,所以type()返回的是对象
         而不是简单的字符串.
     - 上面三个特性在对象创建的时候就被赋值,除了值之外,其他两个特性都是只读的.
  2. 标准类型
     - 数字,整型,布尔型,长整型,浮点型,复数型,字符串,列表,元组,字典
  3. 其他内建类型
     - 类型,Null对象(None),文件,集合/固定集合,函数/方法,模块,类
     - 类型对象和type类型对象
       所有类型对象的类型都是type.
     - None,Python的Null对象
       None没有什么游泳的属性,它的布尔值总是False.
     - 布尔值
       + 所有标准对象均可用于布尔测试
       + 每个对象天生具有布尔True和False值
       + 下列对象的布尔值是False
         None, False(布尔类型),所有的值为零的数:(0(整型),(浮点型),0L(长整型),0.0+0.0j(复数),
         ""(空字符串),[](空列表),()(空元组),{}(空字典))
       + 拥护创建的类实例如果定义了nonzero(__nonzero__())和length(__len__())且值为0,那么它们
         的布尔值就使False.
  4. 标准类型运算符
     - 对象值的比较
       <,>,<=,>=,==,!=,<>
     - 对象身份比较
       + python提供了is和is not运算符来测试两个变量是否指向同一个对象
         a is b等价于id(a)==id(b)
       + 整数对象和字符串对象是不可变对象,所以Python会很高效的缓存它们
     - 布尔类型
       + 优先级从高到低:not, and, or
     - 标准内建函数
       + cmp(obj1, obj2)
         比较obj1和obj2,根据比较结果返回整数i:
         i < 0 if obj1 < obj2
         i > 0 if obj1 > obj2
         i == 0 if obj1 == obj2
         如果是用户自定义对象,cmp()会调用该类的特殊方法__cmp__()
       + repr(obj)或`obj` 
         返回一个对象的字符串表示
         可以用eval()重新得到该对象
       + str(obj)
         返回对象合适可读性号的字符串表示
         不可以用eval()重新得到该对象
       + type(obj)
         得到一个对象的类型,并返回相应的type对象.
  5. 标准类型的分类
     - 更新模型
       | 可变类型   | 列表,字典        |
       | 不可变类型 | 数字,字符串,元组 |

* 数字
